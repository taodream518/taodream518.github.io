(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{465:function(e,t,s){"use strict";s.r(t);var n=s(2),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),t("p",[t("strong",[e._v("客户端直接从本地缓存中获取资源，而无需与服务器进行通信。强缓存的判断是通过缓存头部字段来完成的，例如设置了合适的Cache-Control和Expires字段。")])]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_1-expires-强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-expires-强缓存"}},[e._v("#")]),e._v(" 1. "),t("code",[e._v("Expires")]),e._v(" 强缓存")]),e._v(" "),t("p",[t("strong",[e._v("当客户端请求资源时，获取本地时间戳跟设置的缓存过期时间对比，未过期，走强缓存；已过期，重新发起请求。")])]),e._v(" "),t("hr"),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const express = require("express");\nconst cors = require("cors");\nconst app = express();\n\napp.use(cors());\n\napp.get("/expires", (req, res) => {\n    // 禁用缓存策略\n    res.setHeader("Cache-Control", "no-store");\n    //设置过期时间\n    res.setHeader("Expires", new Date("2024-04-25 14:23:00").toUTCString()); \n    res.json({\n        msg: "expires cache",\n    });\n});\n\napp.listen(9000, () => {\n    console.log("server is running at http://localhost:9000");\n});\n')])])]),t("p",[e._v("缓存时间未过期， 如下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blogs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/Http%E7%9A%84%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/http%E5%BC%BA%E7%BC%93%E5%AD%98Expires-1.png",alt:"http强缓存Expires-1.png"}})]),e._v(" "),t("p",[e._v("缓存时间已过期， 如下图：\n"),t("img",{attrs:{src:"/blogs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/Http%E7%9A%84%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/http%E5%BC%BA%E7%BC%93%E5%AD%98Expires-2.png",alt:"http强缓存Expires-2.png"}})]),e._v(" "),t("h3",{attrs:{id:"_2-cache-control-强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-cache-control-强缓存"}},[e._v("#")]),e._v(" 2. "),t("code",[e._v("Cache-Control")]),e._v(" 强缓存")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("no-store")]),e._v(" 禁用缓存策略")]),e._v(" "),t("li",[t("code",[e._v("no-cache")]),e._v(" 禁用强缓存，使用协商缓存 ( "),t("code",[e._v("Last-Modified")]),e._v(" 或 "),t("code",[e._v("Etag")]),e._v(" )")]),e._v(" "),t("li",[t("code",[e._v("public")]),e._v(" 浏览器、代理服务器（CDN）等均能缓存")]),e._v(" "),t("li",[t("code",[e._v("private")]),e._v(" 仅客户端能缓存")]),e._v(" "),t("li",[t("code",[e._v("max-age")]),e._v(" 资源缓存时长（单位秒）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const express = require("express");\nconst cors = require("cors");\nconst app = express();\n\napp.use(cors());\n\napp.get("/cache-control", (req, res) => {\n    // 设置缓存时间为5秒\n    res.setHeader("Cache-Control", "public, max-age=5");\n    res.json({\n        msg: "cache-control",\n    });\n});\n\napp.listen(9000, () => {\n    console.log("server is running at http://localhost:9000");\n});\n')])])]),t("hr"),e._v(" "),t("p",[t("strong",[e._v("区别：")])]),e._v(" "),t("ol",[t("li",[t("code",[e._v("Expires")]),e._v(" 是HTTP/1.0的产物，"),t("code",[e._v("Cache-Control")]),e._v(" 是HTTP/1.1的产物")]),e._v(" "),t("li",[e._v("两者同时存在，优先级："),t("code",[e._v("Cache-Control")]),e._v(" > "),t("code",[e._v("Expires")])]),e._v(" "),t("li",[t("code",[e._v("Expires")]),e._v(" 是控制时间点， "),t("code",[e._v("Cache-Control")]),e._v(" 是控制时间段；若本地时间不准确，会导致 "),t("code",[e._v("Expires")]),e._v(" 的缓存失效。")])]),e._v(" "),t("h2",{attrs:{id:"协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),t("p",[t("strong",[e._v("客户端会发送带有缓存数据标识的请求头部字段，以向服务器验证资源的有效性。强缓存未命中的情况有："),t("code",[e._v("max-age")]),e._v(" 过期或服务器响应中设置"),t("code",[e._v("Cache-Control: no-cache")])])]),e._v(" "),t("h3",{attrs:{id:"_1-etag-和-if-none-match-协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-etag-和-if-none-match-协商缓存"}},[e._v("#")]),e._v(" 1. "),t("code",[e._v("Etag")]),e._v(" 和 "),t("code",[e._v("If-None-Match")]),e._v(" 协商缓存")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("Etag")]),e._v(" 是对该资源的唯一标识，在上一次请求的"),t("code",[e._v("response header")]),e._v("中，在下一次向服务器发送请求时，会将上一次的 "),t("code",[e._v("Etag")]),e._v(" 值放到"),t("code",[e._v("request header")]),e._v("里的 "),t("code",[e._v("If-None-Match")]),e._v(" 里，服务器接收到 "),t("code",[e._v("If-None-Match")]),e._v(" 的值后，跟该资源文件的 "),t("code",[e._v("Etag")]),e._v(" 值做比较，如果相同，则表示资源文件没有发生改变，命中协商缓存。当资源有变化，"),t("code",[e._v("Etag")]),e._v(" 就会重新生成。")])]),e._v(" "),t("hr"),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const express = require("express");\nconst cors = require("cors");\nconst crypto = require("crypto");\nconst fs = require("fs");\nconst app = express();\n\napp.use(\n    cors({\n        exposedHeaders: ["If-None-Match", "Etag", "If-Modified-Since", "Last-Modified"],\n    })\n);\n\napp.get("/etag", (req, res) => {\n    // 设置缓存时间为10秒并走协商缓存\n    res.setHeader("Cache-Control", "no-cache, max-age=10");\n    // 获取请求头中的If-None-Match\n    const IfNoneMatch = req.get("If-None-Match");\n    // 生成 ETag\n    const etag = crypto.createHash("sha1").update(fs.readFileSync("./src/index.js")).digest("hex");\n    // 设置 ETag\n    res.setHeader("ETag", etag);\n    res.json({\n        data: { IfNoneMatch, etag },\n        msg: "etag",\n    });\n});\n\napp.listen(9000, () => {\n    console.log("server is running at http://localhost:9000");\n});\n\n')])])]),t("p",[e._v("第一次请求，如下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blogs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/Http%E7%9A%84%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/http%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98Etag-1.png",alt:"http协商缓存Etag-1.png"}})]),e._v(" "),t("p",[e._v("第二次请求，如下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blogs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/Http%E7%9A%84%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/http%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98Etag-2.png",alt:"http协商缓存Etag-2.png"}})]),e._v(" "),t("h3",{attrs:{id:"_2-last-modified-和-if-modified-since-协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-last-modified-和-if-modified-since-协商缓存"}},[e._v("#")]),e._v(" 2. "),t("code",[e._v("Last-Modified")]),e._v(" 和 "),t("code",[e._v("If-Modified-Since")]),e._v(" 协商缓存")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("Last-Modified")]),e._v(" 和 "),t("code",[e._v("If-Modified-Since")]),e._v("：服务器通过 "),t("code",[e._v("Last-Modified")]),e._v(" 响应头告知客户端资源的最后修改时间。客户端在后续请求中通过 "),t("code",[e._v("If-Modified-Since")]),e._v(" 请求头携带该时间，服务器判断资源是否有更新。无更新命中缓存，返回 304 状态码；否则，重新请求服务器，返回 200 状态码。")])]),e._v(" "),t("hr"),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const express = require("express");\nconst cors = require("cors");\nconst fs = require("fs");\nconst app = express();\n\napp.use(\n    cors({\n        exposedHeaders: ["If-None-Match", "Etag", "If-Modified-Since", "Last-Modified"],\n    })\n);\n\napp.get("/last-modified", (req, res) => {\n    // 设置缓存时间为10秒并走协商缓存\n    res.setHeader("Cache-Control", "no-cache, max-age=10");\n    // 获取请求头中的If-Modified-Since\n    const IfModifiedSince = req.get("If-Modified-Since");\n    // 获取文件最后修改时间\n    const lastModified = fs.statSync("./src/index.js").mtime.toISOString();\n    // 设置 Last-Modified\n    res.setHeader("Last-Modified", lastModified);\n\n    res.json({\n        data: {\n            IfModifiedSince,\n            lastModified,\n            status: IfModifiedSince === lastModified,\n        },\n        msg: "last-modified",\n    });\n});\n\napp.listen(9000, () => {\n    console.log("server is running at http://localhost:9000");\n});\n\n')])])]),t("p",[e._v("第一次请求，如下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blogs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/Http%E7%9A%84%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/http%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98Last-Modified-1.png",alt:"http协商缓存Last-Modified-1.png"}})]),e._v(" "),t("p",[e._v("第二次请求，如下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blogs/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/Http%E7%9A%84%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/http%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98Last-Modified-2.png",alt:"http协商缓存Last-Modified-2.png"}})]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("区别：")])]),e._v(" "),t("ol",[t("li",[e._v("方式："),t("code",[e._v("Etag")]),e._v(" 是对资源的一种唯一标识，而 "),t("code",[e._v("Last-Modified")]),e._v(" 是该资源文件最后一次更改时间。")]),e._v(" "),t("li",[e._v("精确度："),t("code",[e._v("Etag")]),e._v(" > "),t("code",[e._v("Last-Modified")])]),e._v(" "),t("li",[e._v("性能："),t("code",[e._v("Etag")]),e._v(" < "),t("code",[e._v("Last-Modified")]),e._v("，"),t("code",[e._v("Last-Modified")]),e._v(" 只需要记录时间，而 "),t("code",[e._v("Etag")]),e._v(" 需要服务器通过算法来计算出一个hash值。")]),e._v(" "),t("li",[e._v("优先级："),t("code",[e._v("Etag")]),e._v(" > "),t("code",[e._v("Last-Modified")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);