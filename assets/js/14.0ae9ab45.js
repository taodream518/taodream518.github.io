(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{455:function(a,t,e){"use strict";e.r(t);var r=e(2),n=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"一-构造函数和原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-构造函数和原型"}},[a._v("#")]),a._v(" 一. 构造函数和原型")]),a._v(" "),t("h4",{attrs:{id:"_1-创建对象的三种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建对象的三种方式"}},[a._v("#")]),a._v(" 1.创建对象的三种方式")]),a._v(" "),t("p",[a._v("1)"),t("strong",[a._v("对象字面量")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var obj = {};\n")])])]),t("p",[a._v("2)"),t("strong",[a._v("new Object()")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var obj = new Object();\n")])])]),t("p",[a._v("3)"),t("strong",[a._v("new构造函数")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function Star(){ }\nvar ldh = new Star();\n")])])]),t("h4",{attrs:{id:"_2-实例成员和静态成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-实例成员和静态成员"}},[a._v("#")]),a._v(" 2.实例成员和静态成员")]),a._v(" "),t("p",[a._v("1)"),t("strong",[a._v("实例成员")]),a._v("就是"),t("code",[a._v("构造函数内部通过this添加")]),a._v("的成员(如下代码中的 name 和 age 是实例成员)")]),a._v(" "),t("p",[a._v("2)"),t("strong",[a._v("静态成员")]),a._v("就是在 "),t("code",[a._v("构造函数本身添加")]),a._v("的成员(如下代码中的 sex 是静态成员)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 构造函数中的属性和方法我们称为成员，成员可以添加\nfunction Star(name, age){\n    this.name = name;\n    this.age = age;\n    this.sing = function(){\n       console.log('sing......');\n    }\n}\n// 实例成员(name,age)只能通过实例化的对象来访问，不能通过构造函数访问实例成员\nvar ldh = new Star('刘德华', 20);\nconsole.log(ldh.name); // 刘德华\nconsole.log(Star.name); // undefined \n\n// 静态成员只能通过构造函数来访问，不能通过实例化的对象来访问。\nStar.sex = '男';\nconsole.log(Star.sex); // 男\nconsole.log(ldh.sex); // undefined\n")])])]),t("h4",{attrs:{id:"_3-构造函数的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-构造函数的问题"}},[a._v("#")]),a._v(" 3.构造函数的问题")]),a._v(" "),t("p",[a._v("构造函数存在"),t("code",[a._v("浪费内存")]),a._v("的问题，通过new实例会开辟新的内存空间\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/18146522-eda94e8b86aa61ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"构造函数存在的问题.png"}})]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function Star(name, age){\n    this.name = name;\n    this.age = age;\n    this.sing = function(){\n       console.log('sing......');\n    }\n}\nvar ldh = new Star('刘德华', 20);\nvar zxy= new Star('张学友', 18);\nconsole.log(ldh.sing === zxy.sing); // false 存放的两个不同的内存地址\n")])])]),t("h4",{attrs:{id:"_4-原型对象-prototype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型对象-prototype"}},[a._v("#")]),a._v(" 4.原型对象 prototype")]),a._v(" "),t("p",[a._v("1)原型的概念：是一个对象，通常称prototype为"),t("code",[a._v("原型对象")]),a._v("。\n2)原型的作用："),t("code",[a._v("共享方法")]),a._v(" "),t("code",[a._v("总结")]),a._v("：一般情况下，公共的"),t("code",[a._v("属性定义在构造函数")]),a._v("里，公共的"),t("code",[a._v("方法定义在原型对象")]),a._v("上。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function Star(name, age){\n    this.name = name;\n    this.age = age;\n}\nStar.prototype.sing = function(){\n    console.log('sing......');\n}\nvar ldh = new Star('刘德华', 20);\nvar zxy= new Star('张学友', 18);\nconsole.log(ldh.sing === zxy.sing); // true 原型对象上存放的是同一个内存地址\n")])])]),t("h4",{attrs:{id:"_5-对象原型-proto"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-对象原型-proto"}},[a._v("#")]),a._v(" 5.对象原型  __proto__")]),a._v(" "),t("p",[a._v("通常称__proto__为"),t("code",[a._v("对象原型")]),a._v("。每一个通过"),t("code",[a._v("new 构造函数")]),a._v("构建出来的实例对象都有一个属性为"),t("code",[a._v("__proto__")]),a._v("，它指向着构造函数的原型对象"),t("code",[a._v("即构造函数的.prototype")]),a._v("，所以"),t("code",[a._v("实例对象可以使用原型对象的属性和方法")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function Star(name, age){\n    this.name = name;\n    this.age = age;\n}\nStar.prototype.sing = function(){\n    console.log('sing......');\n}\nvar ldh = new Star('刘德华', 20);\nconsole.log(ldh.__proto__ === Star.prototype); // true\n")])])]),t("h4",{attrs:{id:"_6-构造函数-constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-构造函数-constructor"}},[a._v("#")]),a._v(" 6. 构造函数 constructor")]),a._v(" "),t("p",[a._v("理解："),t("code",[a._v("原型对象（prototype）和对象原型(__proto__)")]),a._v("都有一个"),t("code",[a._v("constructor属性")]),a._v("，它"),t("code",[a._v("指向着构造函数的本身")]),a._v("(通俗来说，该实例对象是哪个构造函数构建出来的?)。\n作用：1."),t("code",[a._v("记录xx实例对象是xx构造函数的引用")]),a._v("  2."),t("code",[a._v("原型对象利用constructor属性指向构造函数")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function Star(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n/*如果在构造函数原型对象要共享的方法比较多，一般采用对象形式书写.\n所以则会把新的对象覆盖掉Star的原型对象，需要手动指回原来的构造函数*/\nStar.prototype = {\n\tconstructor: Star,\n\tsing: function() {\n\t\tconsole.log('sing......');\n\t},\n\tdance: function() {\n\t\tconsole.log('dance......');\n\t}\n}\nvar ldh = new Star('刘德华', 20);\nconsole.log(Star.prototype.constructor); // Star\nconsole.log(ldh.__proto__.constructor); // Star\n")])])]),t("h4",{attrs:{id:"_7-区别构造函数、原型对象、实例对象三角恋关系🔺"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-区别构造函数、原型对象、实例对象三角恋关系🔺"}},[a._v("#")]),a._v(" 7.区别构造函数、原型对象、实例对象三角恋关系🔺")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/18146522-9721a866a27edcfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"构造函数、原型对象、对象实例三者关系.png"}})]),a._v(" "),t("h4",{attrs:{id:"_8-原型链-一图看懂原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-原型链-一图看懂原型链"}},[a._v("#")]),a._v(" 8.原型链（一图看懂原型链）")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/18146522-385c08c5715646f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"原型链.png"}})]),a._v(" "),t("h3",{attrs:{id:"二-继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-继承"}},[a._v("#")]),a._v(" 二. 继承")]),a._v(" "),t("h3",{attrs:{id:"三-常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-常用方法"}},[a._v("#")]),a._v(" 三. 常用方法")]),a._v(" "),t("h4",{attrs:{id:"_1-数组方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组方法"}},[a._v("#")]),a._v(" 1. 数组方法")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("foreach()")]),a._v(" "),t("code",[a._v("循环遍历数组，没有返回值")]),a._v("\n参数：value为数组中的每一项，index为每一项的索引值，arr则为数组的本身, 。")])]),a._v(" "),t("p",[a._v("代码如下:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [1,2,3,4];\narr.foreach((item,index,arr) => {\n     console.log('当前项：', item); // 1,2,3,4\n     console.log('当前项索引值：', index); // 0,1,2,3\n     console.log('数组：', arr); // 输出4次 [1,2,3,4]\n})\n")])])]),t("ul",[t("li",[t("strong",[a._v("map()")]),a._v(" "),t("code",[a._v("创建一个的新数组并返回，不影响原数组")]),a._v("。：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [1, 2, 3, 4];\nvar newArr = arr.map((item, index) => item % 2 === 0));\nconsole.log(newArr); // [2,4]\n")])])]),t("ul",[t("li",[t("strong",[a._v("filter()")]),a._v(" "),t("code",[a._v("一般用于数组过滤，符合条件的元素组成新的数组并返回，没有符合条件则返回空数组。不影响原数组。")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [10, 20, 30, 40];\nvar newArr = arr.filter((item, index, arr) => item > 20);\nconsole.log(newArr); // [30, 40]\n")])])]),t("ul",[t("li",[t("strong",[a._v("some()")]),a._v(" 用于查找数组中符合条件的元素，如果"),t("code",[a._v("任意一项符合条件则返回,会终止循环，不再继续往下执行,一项符合条件返回true, 否则返回false")]),a._v(" "),t("code",[a._v("*注意：空数组返回false")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [10, 20, 30, 40, 50];\nvar flag = arr.some((item, index) => item > 100);\nconsole.log(flag); // false\nconsole.log([].some(item => item)); // false\n")])])]),t("ul",[t("li",[t("strong",[a._v("every()")])])]),a._v(" "),t("p",[a._v("用于查找数组中符合条件的元素，如果"),t("code",[a._v("每一项都符合条件则返回true, 否则返回false")]),a._v(" "),t("code",[a._v("*注意：空数组返回true")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [10, 20, 30, 40, 50];\nvar flag = arr.every((item, index) => item > 5);\nconsole.log(flag); // true\nconsole.log([].every(item => item)); // true\n")])])]),t("h4",{attrs:{id:"_2-字符串方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符串方法"}},[a._v("#")]),a._v(" 2. 字符串方法")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("trim()")]),a._v(" "),t("code",[a._v("用于去除字符串首尾空格，并返回去掉空格后的字符串。")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var str= ' abc ';\nvar newStr = str.trim();\nconsole.log(newStr); // abc\n")])])]),t("h4",{attrs:{id:"_3-对象方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象方法"}},[a._v("#")]),a._v(" 3.对象方法")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Object.keys()")]),a._v(" "),t("code",[a._v("用于获取对象自身所有的属性（类似于for...in）并返回由属性名组成的数组")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var obj = {\n\tname: 'tao',\n\tage: 18\n}\nvar arr = Object.keys(obj);\nconsole.log(arr); // ['name', 'age']\n")])])]),t("ul",[t("li",[t("strong",[a._v("Object.defineProperty()")]),a._v(" "),t("code",[a._v("用于定义新属性或修改原有的属性")])])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("Object.defineProperty(obj, prop, descriptor)")]),a._v("\nobj  需要定义属性的当前对象\nprop 当前需要定义的属性\ndescriptor 属性描述符。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var obj = {};\n// 用defineProperty定义和修改属性\nObject.defineProperty(obj, 'name', {\n\tvalue: 'tao',\n\tenumerable: false, // 是否可遍历 默认false\n\twritable: false, // 是否可重写 默认false\n\tconfigureable: false // configurable属性性表示对象的属性是否可以被删除，以及除writable属性外的其他属性是否可以被修改。\n})\nconsole.log(obj);\n")])])]),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000007434923",target:"_blank",rel:"noopener noreferrer"}},[a._v("附上需深入defineProperty()方法的链接：https://segmentfault.com/a/1190000007434923"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);